// Generated by CoffeeScript 1.4.0
var args, convert, error, fs, input, is_op, output, output_op, path, quick_op, short, show,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

show = console.log;

error = function(x) {
  throw new Error(x);
};

fs = require('fs');

path = require('path');

require('seajs');

convert = require('./lines').convert;

args = process.argv.slice(2);

is_op = function(str) {
  return str[0] === '-';
};

short = function(str) {
  if (str === '--output') {
    return '-o';
  } else if (str === '--quick') {
    return '-q';
  } else if (str === '--help') {
    return '-h';
  } else {
    return str;
  }
};

args = args.map(short);

if (__indexOf.call(args, '-h') >= 0) {
  show('\n');
  show('she is a tool to help you write less brackets in Scheme\n');
  show('-o   --output      set output file name');
  show('-h   --help        show help\n');
  show('This is only a small tool, find she on Github');
  show('You may folk the repo to improve she.\n');
  process.exit();
}

output = void 0;

output_op = void 0;

quick_op = void 0;

input = [];

args.forEach(function(item) {
  if (output_op != null) {
    output = item;
    return output_op = void 0;
  } else if (is_op(item)) {
    if (item === '-o') {
      return output_op = 'now on';
    } else if (item === '-q') {
      return quick_op = 'now on';
    } else {
      show('option not recognized: ', item);
      return process.exit();
    }
  } else {
    return input.push(item);
  }
});

input.forEach(function(file) {
  var name, run, target;
  if (output != null) {
    if (fs.existsSync(output)) {
      if (fs.statSync(output).isDirectory()) {
        name = path.basename(file);
        target = path.join(output, name.replace(/\.\w+$/, '.scm'));
      } else {
        target = output;
      }
    } else {
      target = output;
    }
  } else {
    target = file.replace(/\.\w+$/, '.scm');
  }
  (run = function() {
    return fs.readFile(file, 'utf8', function(err, data) {
      if (err != null) {
        throw err;
      }
      return fs.writeFile(target, convert(data), function() {});
    });
  })();
  if (quick_op == null) {
    return fs.watchFile(file, {
      interval: 200
    }, run);
  }
});
